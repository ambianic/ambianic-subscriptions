/**
 * ambianic-cloud-api-collection
 * This collection contains a specification for all API endpoints within Ambianic's Cloud API.
 *
 * The version of the OpenAPI document: 1x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse2003Product model module.
 * @module model/InlineResponse2003Product
 * @version 1x
 */
class InlineResponse2003Product {
    /**
     * Constructs a new <code>InlineResponse2003Product</code>.
     * @alias module:model/InlineResponse2003Product
     * @param active {Boolean} 
     * @param attributes {Array.<Object>} 
     * @param created {Number} 
     * @param description {String} 
     * @param id {String} 
     * @param images {Array.<Object>} 
     * @param livemode {Boolean} 
     * @param metadata {Object} 
     * @param name {String} 
     * @param _object {String} 
     * @param type {String} 
     * @param updated {Number} 
     */
    constructor(active, attributes, created, description, id, images, livemode, metadata, name, _object, type, updated) { 
        
        InlineResponse2003Product.initialize(this, active, attributes, created, description, id, images, livemode, metadata, name, _object, type, updated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, attributes, created, description, id, images, livemode, metadata, name, _object, type, updated) { 
        obj['active'] = active;
        obj['attributes'] = attributes;
        obj['created'] = created;
        obj['description'] = description;
        obj['id'] = id;
        obj['images'] = images;
        obj['livemode'] = livemode;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['object'] = _object;
        obj['type'] = type;
        obj['updated'] = updated;
    }

    /**
     * Constructs a <code>InlineResponse2003Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2003Product} obj Optional instance to populate.
     * @return {module:model/InlineResponse2003Product} The populated <code>InlineResponse2003Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2003Product();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [Object]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Object]);
            }
            if (data.hasOwnProperty('livemode')) {
                obj['livemode'] = ApiClient.convertToType(data['livemode'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('package_dimensions')) {
                obj['package_dimensions'] = ApiClient.convertToType(data['package_dimensions'], Object);
            }
            if (data.hasOwnProperty('shippable')) {
                obj['shippable'] = ApiClient.convertToType(data['shippable'], Object);
            }
            if (data.hasOwnProperty('statement_descriptor')) {
                obj['statement_descriptor'] = ApiClient.convertToType(data['statement_descriptor'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unit_label')) {
                obj['unit_label'] = ApiClient.convertToType(data['unit_label'], Object);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], Object);
            }
        }
        return obj;
    }


}

/**
 * @member {Boolean} active
 */
InlineResponse2003Product.prototype['active'] = undefined;

/**
 * @member {Array.<Object>} attributes
 */
InlineResponse2003Product.prototype['attributes'] = undefined;

/**
 * @member {Number} created
 */
InlineResponse2003Product.prototype['created'] = undefined;

/**
 * @member {String} description
 */
InlineResponse2003Product.prototype['description'] = undefined;

/**
 * @member {String} id
 */
InlineResponse2003Product.prototype['id'] = undefined;

/**
 * @member {Array.<Object>} images
 */
InlineResponse2003Product.prototype['images'] = undefined;

/**
 * @member {Boolean} livemode
 */
InlineResponse2003Product.prototype['livemode'] = undefined;

/**
 * @member {Object} metadata
 */
InlineResponse2003Product.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
InlineResponse2003Product.prototype['name'] = undefined;

/**
 * @member {String} object
 */
InlineResponse2003Product.prototype['object'] = undefined;

/**
 * @member {Object} package_dimensions
 */
InlineResponse2003Product.prototype['package_dimensions'] = undefined;

/**
 * @member {Object} shippable
 */
InlineResponse2003Product.prototype['shippable'] = undefined;

/**
 * @member {Object} statement_descriptor
 */
InlineResponse2003Product.prototype['statement_descriptor'] = undefined;

/**
 * @member {String} type
 */
InlineResponse2003Product.prototype['type'] = undefined;

/**
 * @member {Object} unit_label
 */
InlineResponse2003Product.prototype['unit_label'] = undefined;

/**
 * @member {Number} updated
 */
InlineResponse2003Product.prototype['updated'] = undefined;

/**
 * @member {Object} url
 */
InlineResponse2003Product.prototype['url'] = undefined;






export default InlineResponse2003Product;

