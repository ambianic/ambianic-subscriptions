/**
 * ambianic-cloud-api-collection
 * This collection contains a specification for all API endpoints within Ambianic's Cloud API.
 *
 * The version of the OpenAPI document: 1x
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';

/**
* Default service.
* @module api/DefaultApi
* @version 1x
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSubscription operation.
     * @callback module:api/DefaultApi~createSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe a user to Ambianic's Premium Services
     * A POST request to create a new customer under Ambianic and also subscribe user to Ambianic Premium Service
     * @param {String} accessControlAllowOrigin 
     * @param {String} email 
     * @param {String} cvc 
     * @param {String} _number 
     * @param {String} expYear 
     * @param {String} expMonth 
     * @param {module:api/DefaultApi~createSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    createSubscription(accessControlAllowOrigin, email, cvc, _number, expYear, expMonth, callback) {
      let postBody = null;
      // verify the required parameter 'accessControlAllowOrigin' is set
      if (accessControlAllowOrigin === undefined || accessControlAllowOrigin === null) {
        throw new Error("Missing the required parameter 'accessControlAllowOrigin' when calling createSubscription");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling createSubscription");
      }
      // verify the required parameter 'cvc' is set
      if (cvc === undefined || cvc === null) {
        throw new Error("Missing the required parameter 'cvc' when calling createSubscription");
      }
      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling createSubscription");
      }
      // verify the required parameter 'expYear' is set
      if (expYear === undefined || expYear === null) {
        throw new Error("Missing the required parameter 'expYear' when calling createSubscription");
      }
      // verify the required parameter 'expMonth' is set
      if (expMonth === undefined || expMonth === null) {
        throw new Error("Missing the required parameter 'expMonth' when calling createSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Access-Control-Allow-Origin': accessControlAllowOrigin
      };
      let formParams = {
        'email': email,
        'cvc': cvc,
        'number': _number,
        'exp_year': expYear,
        'exp_month': expMonth
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data', 'application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscription operation.
     * @callback module:api/DefaultApi~deleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Ambianic's user subscription
     * Delete a user's subscription on Stripe, either active or expired.
     * @param {String} subscriptionId ID for the user's subscription to be deleted
     * @param {String} accessControlAllowOrigin 
     * @param {String} accessControlAllowHeaders 
     * @param {String} contentType 
     * @param {module:api/DefaultApi~deleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    deleteSubscription(subscriptionId, accessControlAllowOrigin, accessControlAllowHeaders, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deleteSubscription");
      }
      // verify the required parameter 'accessControlAllowOrigin' is set
      if (accessControlAllowOrigin === undefined || accessControlAllowOrigin === null) {
        throw new Error("Missing the required parameter 'accessControlAllowOrigin' when calling deleteSubscription");
      }
      // verify the required parameter 'accessControlAllowHeaders' is set
      if (accessControlAllowHeaders === undefined || accessControlAllowHeaders === null) {
        throw new Error("Missing the required parameter 'accessControlAllowHeaders' when calling deleteSubscription");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'subscriptionId': subscriptionId
      };
      let headerParams = {
        'Access-Control-Allow-Origin': accessControlAllowOrigin,
        'Access-Control-Allow-Headers': accessControlAllowHeaders,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationProduct operation.
     * @callback module:api/DefaultApi~getNotificationProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve notification product
     * An endpoint to retrieve details about the Ambianic notifications product.
     * @param {String} accessControlAllowOrigin 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject1} opts.inlineObject1 
     * @param {module:api/DefaultApi~getNotificationProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    getNotificationProduct(accessControlAllowOrigin, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject1'];
      // verify the required parameter 'accessControlAllowOrigin' is set
      if (accessControlAllowOrigin === undefined || accessControlAllowOrigin === null) {
        throw new Error("Missing the required parameter 'accessControlAllowOrigin' when calling getNotificationProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Access-Control-Allow-Origin': accessControlAllowOrigin
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriptionData operation.
     * @callback module:api/DefaultApi~getSubscriptionDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's subscription data
     * Retrieve a subscribed customer's data from Stripe
     * @param {String} userStripeId Id for the customer created on Stripe
     * @param {String} userSubscriptionId Id for the user's subscription with Ambianic
     * @param {String} accessControlAllowOrigin 
     * @param {String} accessControlAllowHeaders 
     * @param {String} contentType 
     * @param {module:api/DefaultApi~getSubscriptionDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    getSubscriptionData(userStripeId, userSubscriptionId, accessControlAllowOrigin, accessControlAllowHeaders, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'userStripeId' is set
      if (userStripeId === undefined || userStripeId === null) {
        throw new Error("Missing the required parameter 'userStripeId' when calling getSubscriptionData");
      }
      // verify the required parameter 'userSubscriptionId' is set
      if (userSubscriptionId === undefined || userSubscriptionId === null) {
        throw new Error("Missing the required parameter 'userSubscriptionId' when calling getSubscriptionData");
      }
      // verify the required parameter 'accessControlAllowOrigin' is set
      if (accessControlAllowOrigin === undefined || accessControlAllowOrigin === null) {
        throw new Error("Missing the required parameter 'accessControlAllowOrigin' when calling getSubscriptionData");
      }
      // verify the required parameter 'accessControlAllowHeaders' is set
      if (accessControlAllowHeaders === undefined || accessControlAllowHeaders === null) {
        throw new Error("Missing the required parameter 'accessControlAllowHeaders' when calling getSubscriptionData");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getSubscriptionData");
      }

      let pathParams = {
      };
      let queryParams = {
        'userStripeId': userStripeId,
        'userSubscriptionId': userSubscriptionId
      };
      let headerParams = {
        'Access-Control-Allow-Origin': accessControlAllowOrigin,
        'Access-Control-Allow-Headers': accessControlAllowHeaders,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendNotification operation.
     * @callback module:api/DefaultApi~sendNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an event detection notification
     * An endpoint to send notifications about detected objects to a premium ambianic subscriber from a running edge device, delivered from the Cloud API.
     * @param {String} userId ID of the user that owns the Edge Device triggering the notification
     * @param {String} notification Notification object containing detected event details from running ambianic edge device
     * @param {String} accessControlAllowOrigin 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject} opts.inlineObject 
     * @param {module:api/DefaultApi~sendNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    sendNotification(userId, notification, accessControlAllowOrigin, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling sendNotification");
      }
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling sendNotification");
      }
      // verify the required parameter 'accessControlAllowOrigin' is set
      if (accessControlAllowOrigin === undefined || accessControlAllowOrigin === null) {
        throw new Error("Missing the required parameter 'accessControlAllowOrigin' when calling sendNotification");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'notification': notification
      };
      let headerParams = {
        'Access-Control-Allow-Origin': accessControlAllowOrigin
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/notification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
