/**
 * ambianic-functions-collection
 * A postman collection documenting the Netlify cloud functions created for use within Ambianic-PWA
 *
 * The version of the OpenAPI document: 4b8f433d-5891-4ae3-bb49-ca6942a9b08d
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmbianicFunctionsCollection);
  }
}(this, function(expect, AmbianicFunctionsCollection) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmbianicFunctionsCollection.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('send notification', function() {
      it('should call sendNotification successfully', function(done) {
        instance.sendNotification(Math.random().toString() , "Cat detected with 0.98172927612 confidence", "", (error, data, {res}) => {
         if (error) throw error;
          expect(res.statusCode).to.be(200)
        })

        done();
      });
    });
    describe('create subscription', function() {
      it('should call subscribe successfully', function(done) {
        instance.subscribeUser(Math.random().toString(), "123", new Date(), new Date(), "test@mail.co", "*", "Content-Type", "application/json", (error, data, {res}) => {
         if (error) throw error;
          expect(res.statusCode).to.be(200)
        });

        done();
      });
    });
    describe('delete subscription', function() {
      it('should call delete-subscription successfully', function(done) {
        instance.deleteSubscription(Math.random().toString(),  "*", "Content-Type", "application/json", (error, d, { res }) => {
         if (error) throw error;
          expect(res.statusCode).to.be(200)
        });
        done();
      });
    });
    describe('get subscription data', function() {
      it('should call get-subscription-ata successfully', function(done) {
        instance.getSubscriptionData("cus|1212", "sub|1212", "*", "Content-Type", "application/json",  (error, d, {res}) => {
         if (error) throw error;

          expect(res.statusCode).to.be(200)
        });
        done();
      });
    });
  });

}));
